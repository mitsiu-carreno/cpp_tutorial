Floating-point Data Types
Floating-poiot data types are used to define variables that can hold real numbers

Internally, floating-point numbers are stored in a manner similar to SCIENTIFIC NOTATION.
The number 47,281.97 in scientific notation is 4.728197x10^4 (10^4 is equal to 10,000 and 4.728197 x 10,000 is 47,281.97)

The first part of the number, 4.728197 is called the MANTISSA. The MANTISSA is multiplied by a power of ten

Computers typically use E notation to represent floating-point values. In E notation, the number 47,281.97 would be 4.728197E4. The part of the number before the E is the MANTISSA, and the part after the E is the power of 10. When a floating point number is stored in memory, it is stored as the MANTISSA and the power of 10

Decimal Notation    Scientific Notation     E Notation
247.91              2.4791 x10^2            2.4791E2
0.00072             7.2 x10^-4              7.2E-4
2,900,000           2.9 x10^6               2.9E6


In C++ THERE ARE THREE DATA TYPES THAT CAN REPRESENT FLOATING POINT NUMBERS
-float (considered SINGLE PRECISION)
-double (considered DOUBLE PRECISION)
-long double  (intended to be larger than the double)

* The exact size of these data types are dependent on the computer you are using the only guarantees are:
-A double is at least as big as float
-A long double is at least as big as a double


Single precision        float         4 bytes. Numbers between +-3.4E-38 and +-3.4E38
Double precision        double        8 bytes. Numbers between +-1.7E-308 and +-1.7E308
Long double precision   long double   8 bytes*. Numbers between +-1.7E-308 and +-1.7E308

* Some compilers use 10 bytes for long doubles. This allows a range of +-3.4E-4932 to +-1.1E4832


You will notice THERE ARE NO UNSIGNED FLOAT POINT DATA TYPES. On all machines, variables of the FLOAT, DOUBLE and LONG DOUBLE data types can store positive or negative numbers.

FLOATING PONT LITERALS
Floating point literals may be expressed in a variety of ways.
E notation is one method, useful when writting numbers that are extremely large or extremely small.
E notation numbers may be expressed with an uppercase E or a lowercase e.

// This program uses floating point data types.
#include <iostream>
using namespace std;

int main(){
  float distance;
  double mass;

  distance = 1.495979E11;
  mass = 1.989E30;

  cout << "The Sun is " << distance << " meters away.\n";
  cout << "The Sun\'s mass is " << mass <<  " kilograms.\n";
  return 0;
}

You can also express floating-point literals in decimal notation. The literal 1.495979E11 could have been written as
  149597900000.00

All of the following floating-point literals are equivalent:
  1.4959E11
  1.4959e11
  1.4959E+11
  1.4959e+11
  149590000000.00

FLOATING-POINT LITERALS ARE NORMAILLY STORED IN MEMORY AS DOUBLES. But, C++ provides tools for handling just about any situation.

In case you need to force a literal to be stored as a "float", you can append the letter "F" or "f" to the end of it. 

  1.2F
  45.90f

If you want to force a value to be stored as a long double, apend an "L" or "l" to it

  1034.56L
  89.21l

The compiler won't confuse these with LONG INTEGERS because THEY HAVE DECIMAL POINTS.

Assigning Floating-point values to integer variables
When a floating-point value is assigned to an integer variable, THE FRACTIONAL PART OF THE VALUE IS DISCARDED

  int number;
  number = 7.5;   // Assign 7 to number

Assigning a floating-point variable to an integer variable has the same effect

  int i;
  float f;
  f = 7.5;
  i = f;  // Assigns 7 to i

Note when a floating-point value is truncated it is not rounded
Warning Floating-point variables can hold a much larger range of values than integer variables can. If a floating-point value is being stored in an integer variable, and the whole part of the value is too large for the integer variable, an INVALID VALUE will be stored in the integer variable.


